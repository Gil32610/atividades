//CLASSE LSENODE:
package br.unicap.edi.gil;

    public class LSENode<T> {
        private T content;
        private LSENode<T> next;   


        
        public LSENode (T content) {
            this.content = content;
        }
        public void setContent(T content) {
            this.content = content;
        }
        public T getContent() {
            return this.content;
        }
        public void setNext(LSENode<T> novoProx) {
            this.next = novoProx;
        }
        public LSENode<T> getNext () {
            return this.next;
        }    
     
}

//QUESTÃO 1:
//QUEUE COM LIMITE

package LimitedQueue;
    public class Queue<T> {
        private LSENode<T> head;
        private LSENode<T> tail;
        private int nodes;
        private int quantity;
    
        public Queue(int nodes) {
            this.nodes = nodes;
        }
    
        public boolean isEmpty() {
            if (this.head == null && this.tail == null && this.quantity == 0) {
                return true;
            }
            return false;
        }
    
        public void enQueue(T content) {
            LSENode<T> node = new LSENode(content);
            if (this.isEmpty()) {
                this.head = node;
                this.tail = node;
                this.quantity++;
            } else {
                this.tail.setNext(node);
                this.tail = node;
                this.quantity++;
            }
        }
    
        public T deQueue() {
            T content;
            if (this.head.getNext() == null) {
                content = this.head.getContent();
                this.head = null;
                this.tail = null;
                this.quantity = 0;
                return content;
    
            }
            LSENode<T> current = this.head.getNext();
            content = this.head.getContent();
            this.head = current;
            this.quantity--;
            return content;
    
        }
    
        public T head() {
            T content = this.head.getContent();
            return content;
        }
    
        public boolean isFull() {
            if (this.quantity == nodes) {
                return true;
            }
            return false;
        }
    }

//QUESTÃO 2:
//classe SoDinheiro

package Question2;

import LimitedQueue.Queue;

public class SoDinheiro {
    private Queue<Integer> senhas;
    private int ticket;

    public SoDinheiro() {
        this.senhas = new Queue<>(20);
    }

    public Integer lastInLine() {
        return this.ticket;
    }

    public Integer firstInLine() {
        return this.senhas.head();
    }

    public void newTicket() {
        if (this.senhas.isFull()) {
            System.out.println("Aguarde o atendimento ficar disponível.");
        } else if (this.senhas.isEmpty()) {
            this.ticket++;
            senhas.enQueue(this.ticket);
            System.out.println("Dirija-se ao guichê. Ticket: " + this.ticket);
        } else {
            this.ticket++;
            senhas.enQueue(this.ticket);
            System.out.println("Aguarde o atendimento. Ticket: " + this.ticket);
        }
    }

    public void nextCustomer() {
        if (this.senhas.isEmpty()) {
            System.out.println("Não há ninguém na fila de espera");
        } else {
            this.senhas.deQueue();
            System.out.println("Volte sempre!");
        }
    }
}

//APLICAÇÃO:

package Question2;
import java.util.Scanner;

public class Service {
    public static void main(String[] args) {
        SoDinheiro banco = new SoDinheiro();
        int op;
        Scanner s = new Scanner(System.in);

        do {

            System.out.println("Escolha a opção: ");
            showMenu();
            op = Integer.parseInt(s.nextLine());
            switch (op) {
                case 0:
                    System.out.println("FIM!");
                    break;
                case 1:
                    banco.newTicket();
                    break;
                case 2:
                    banco.nextCustomer();
                    break;
                case 3:
                    System.out.println("Primeiro ticket da fila: " + banco.firstInLine());
                    break;
                case 4:
                    System.out.println("Ultimo ticket da fila: " + banco.lastInLine());
                    break;
                default:
                    System.out.println("Opção inálida");
                    break;
            }

        } while (op != 0);

    }

    public static void showMenu() {
        System.out.println("1 - solicitar senha");
        System.out.println("2 - Próximo cliente");
        System.out.println("3 - Primeiro da fila");
        System.out.println("4 - último da fila");
        System.out.println("0 - encerrar");
    }
}

//QUESTÃO 3:
//CLASSE DEQUE

package br.unicap.edi.gil;

public class Deque<T> {
    private LSENode<T> head;
    private LSENode<T> tail;
    private int capacity;
    private int quantity;

    public Deque(int capacity) {
        this.capacity = capacity;
    }

    public boolean isEmpty() {
        if (this.head == null && this.quantity == 0 && this.tail == null) {
            return true;
        }
        return false;
    }

    public void push(T content) {
        LSENode current = new LSENode<T>(content);
        if (this.isEmpty()) {
            this.head = current;
            this.tail = current;
            this.quantity++;
        } else {
            current.setNext(this.head);
            this.head = current;
            this.quantity++;
        }

    }

    public T pop() {
        T content = this.head.getContent();
        this.head = this.head.getNext();
        this.quantity--;
        return content;
    }

    public void inject(T content) {
        LSENode current = new LSENode<T>(content);
        if (this.isEmpty()) {
            this.head = current;
            this.tail = current;
            this.quantity++;
        } else {
            this.tail.setNext(current);
            this.tail = current;
            quantity++;
        }
    }

    public T eject() {
        T content = this.tail.getContent();
        if(this.head.getNext()== null){
            return content;
        }
        LSENode current = this.head;
        while (current.getNext() != this.tail) {
            current = current.getNext();
        }
        current.setNext(null);
        this.tail = current;
        return content;
    }

    public boolean isFull() {
        if (this.quantity == this.capacity) {
            return true;
        }
        return false;
    }
}

//QUESTÃO 4:
//APLICAÇÃO UTILIZANDO DEQUE
package Question4;

import br.unicap.edi.gil.Deque;
import java.util.Scanner;

public class SmallApp {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int capacity;
        int op, aNumber;

        System.out.println("Informe a capacidade: ");
        capacity = Integer.parseInt(s.nextLine());
        Deque<Integer> aDeque = new Deque(capacity);

        do {
            menu();
            op = Integer.parseInt(s.nextLine());
            switch (op) {
                case 0:
                    System.out.println("FIM!");
                    break;
                case 1:
                    if (aDeque.isFull()) {
                        System.out.println("Deque cheio");
                    } else {
                        System.out.println("Informe o número: ");
                        aNumber = Integer.parseInt(s.nextLine());
                        aDeque.push(aNumber);
                        System.out.println("Numero inserido");
                    }
                    break;
                case 2:
                    System.out.println("Numero removido: " + aDeque.pop());
                    break;
                case 3:
                    if (aDeque.isFull()) {
                        System.out.println("Deque cheio");
                    } else {
                        System.out.println("Informe o numero: ");
                        aNumber = Integer.parseInt(s.nextLine());
                        aDeque.inject(aNumber);
                    }
                    break;
                case 4:
                    System.out.println("Numero removido: " + aDeque.eject());
                    break;
                default:
                    System.out.println("Opção inálida");
                    break;
            }

        } while (op != 0);

    }

    public static void menu() {
        System.out.println("1 - inserir número no começo");
        System.out.println("2 - remover primeiro número");
        System.out.println("3 - inserir número no final");
        System.out.println("4 - remover ultimo número");
        System.out.println("0 - encerrar");
    }
}



